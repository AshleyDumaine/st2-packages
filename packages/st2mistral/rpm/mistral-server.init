#!/bin/sh
#
### BEGIN INIT INFO
# Provides: mistral-server
# Required-Start: $local_fs $network $named $remote_fs $syslog
# Required-Stop: $local_fs $network $named $remote_fs $syslog
# Short-Description: mistral service
# Description: Mistral workflow service (engine/executor)
### END INIT INFO

# mistral     This shell script takes care of starting and stopping
#             mistral daemon.
# chkconfig: - 85 15
# description: Mistral workflow service (engine/executor)
# processname: mistral

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Source our sysv functions
. /opt/stackstorm/mistral/share/sysvinit/helpers
. /opt/stackstorm/mistral/share/sysvinit/functions

DESC="mistral"
NAME=mistral-server
DAEMON=/opt/stackstorm/mistral/bin/mistral-server
COMPONENTS="api,engine,executor"
SERVER_ARGS="--config-file /etc/mistral/mistral.conf --log-file /var/log/mistral/mistral-server.log"
PIDFILE=/var/run/mistral/$NAME.pid
RUNAS_USER="mistral"

lockfile=/var/lock/subsys/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 5

# Read configuration variable file if it is present
set -o allexport
[ -r /etc/sysconfig/mistral ] && . /etc/sysconfig/mistral
set +o allexport


# NB! Exit if mistral-server is disabled
enabled_list -q server || exit 0
DAEMON_ARGS="--server $(enabled_list server) ${SERVER_ARGS}"


start() {
    echo -n $"Starting $NAME: "
    daemon --background --check=${NAME} --user=${RUNAS_USER} \
        $DAEMON $DAEMON_ARGS
    pgrep_waitforpid --scriptname=${NAME} --pidfile=${PIDFILE} ${DAEMON}
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile || return $retval
}

stop() {
    echo -n $"Stopping $NAME: "
    killproc -p $PIDFILE $DAEMON
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile || return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $PIDFILE $NAME
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
